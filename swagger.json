{
  "openapi": "3.0.0",
  "paths": {
    "/v1": {
      "get": {
        "operationId": "AppController_getHello_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a simple readiness message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Koajo API ready"
                }
              }
            }
          }
        },
        "summary": "Health check endpoint",
        "tags": [
          "system"
        ]
      }
    },
    "/v1/achievements/summary": {
      "get": {
        "operationId": "AchievementsController_getSummary_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AchievementsSummaryDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "achievements"
        ]
      }
    },
    "/v1/auth/signup": {
      "post": {
        "operationId": "AuthController_signup_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed or account already exists."
          }
        },
        "summary": "Register a new account",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/verify-email": {
      "post": {
        "operationId": "AuthController_verifyEmail_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email successfully verified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEmailResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired verification link."
          }
        },
        "summary": "Confirm email verification link token",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/stripe-verification": {
      "post": {
        "operationId": "AuthController_completeStripeVerification_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteStripeVerificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stripe verification status updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteStripeVerificationResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed for provided payload."
          },
          "404": {
            "description": "Account not found for provided email."
          }
        },
        "summary": "Record Stripe verification status and dispatch email verification if eligible",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/resend-email": {
      "post": {
        "operationId": "AuthController_resendEmail_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email re-issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendVerificationResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Cooldown not elapsed or email invalid."
          }
        },
        "summary": "Resend verification email",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/forgot-password": {
      "post": {
        "operationId": "AuthController_forgotPassword_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email dispatched if account exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordResultDto"
                }
              }
            }
          }
        },
        "summary": "Request a password reset link",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid, expired, or mismatched reset token."
          },
          "404": {
            "description": "Account not found."
          }
        },
        "summary": "Reset account password using a reset link token",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/change-password": {
      "post": {
        "operationId": "AuthController_changePassword_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed or current password is incorrect."
          },
          "401": {
            "description": "Authentication required or token invalid."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Change the authenticated account password",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/profile/avatar": {
      "patch": {
        "operationId": "AuthController_updateAvatar_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAvatarResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid avatar URL supplied."
          },
          "401": {
            "description": "Authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update the authenticated account avatar",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/profile/notifications": {
      "patch": {
        "operationId": "AuthController_updateNotificationPreferences_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationPreferencesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification preferences updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateNotificationPreferencesResultDto"
                }
              }
            }
          },
          "400": {
            "description": "No changes supplied or payload invalid."
          },
          "401": {
            "description": "Authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update email notification preferences",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/auth/login": {
      "post": {
        "operationId": "AuthController_login_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login result.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/LoginSuccessResultDto"
                    },
                    {
                      "$ref": "#/components/schemas/LoginVerificationRequiredResultDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Credentials are invalid or account requires verification."
          }
        },
        "summary": "Authenticate an account",
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/pods/plans": {
      "get": {
        "operationId": "PodsController_getPlans_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PodPlanDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List pod plans and their lifecycles",
        "tags": [
          "pods"
        ]
      }
    },
    "/v1/pods/open": {
      "get": {
        "operationId": "PodsController_listOpenPods_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PodMembershipDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List pods that are currently open or in grace period",
        "tags": [
          "pods"
        ]
      }
    },
    "/v1/pods/custom": {
      "post": {
        "operationId": "PodsController_createCustomPod_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomPodDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodMembershipDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed for payload or business rules."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a custom pod and invite members",
        "tags": [
          "pods"
        ]
      }
    },
    "/v1/pods/custom/invites/accept": {
      "post": {
        "operationId": "PodsController_acceptCustomPodInvite_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptCustomPodInviteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodMembershipDto"
                }
              }
            }
          },
          "400": {
            "description": "Token invalid or account not eligible."
          },
          "404": {
            "description": "Invitation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Accept a custom pod invitation",
        "tags": [
          "pods"
        ]
      }
    },
    "/v1/pods/refresh": {
      "post": {
        "operationId": "PodsController_refresh_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Recalculate pod lifecycle states",
        "tags": [
          "pods"
        ]
      }
    },
    "/v1/pods/plans/{planCode}/join": {
      "post": {
        "operationId": "PodsController_joinPlan_v1",
        "parameters": [
          {
            "name": "planCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinPodDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodMembershipDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Join an open pod for the specified plan",
        "tags": [
          "pods"
        ]
      }
    },
    "/v1/pods/mine": {
      "get": {
        "operationId": "PodsController_myPods_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PodMembershipDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve pods associated with the authenticated account",
        "tags": [
          "pods"
        ]
      }
    },
    "/v1/admin/auth/login": {
      "post": {
        "operationId": "AdminAuthController_login_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminLoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLoginResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Invalid credentials."
          }
        },
        "summary": "Authenticate an admin user",
        "tags": [
          "admin-auth"
        ]
      }
    },
    "/v1/admin/users": {
      "get": {
        "operationId": "AdminUsersController_list_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Admin users list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminUserDtoClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Admin authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List admin users",
        "tags": [
          "admin-users"
        ]
      },
      "post": {
        "operationId": "AdminUsersController_create_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdminUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Admin user created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAdminUserResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Admin authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new admin user (super admin only)",
        "tags": [
          "admin-users"
        ]
      }
    },
    "/v1/admin/accounts": {
      "get": {
        "operationId": "AdminAccountsController_list_v1",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter records (email or name).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Pagination limit.",
            "schema": {
              "minimum": 1,
              "maximum": 200,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Pagination offset.",
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts fetched."
          },
          "401": {
            "description": "Admin authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List customer accounts",
        "tags": [
          "admin-accounts"
        ]
      }
    },
    "/v1/admin/accounts/{accountId}": {
      "get": {
        "operationId": "AdminAccountsController_getOne_v1",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account fetched."
          },
          "401": {
            "description": "Admin authentication required."
          },
          "404": {
            "description": "Account not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get account details by ID",
        "tags": [
          "admin-accounts"
        ]
      }
    },
    "/v1/admin/accounts/{accountId}/notifications": {
      "patch": {
        "operationId": "AdminAccountsController_updateNotifications_v1",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationPreferencesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification preferences updated."
          },
          "401": {
            "description": "Admin authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update notification preferences for an account",
        "tags": [
          "admin-accounts"
        ]
      }
    },
    "/v1/admin/accounts/{accountId}/achievements": {
      "get": {
        "operationId": "AdminAccountsController_achievements_v1",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Achievements summary fetched."
          },
          "401": {
            "description": "Admin authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch achievement summary for an account",
        "tags": [
          "admin-accounts"
        ]
      }
    },
    "/v1/admin/pods": {
      "get": {
        "operationId": "AdminPodsController_list_v1",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter records (email or name).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Pagination limit.",
            "schema": {
              "minimum": 1,
              "maximum": 200,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Pagination offset.",
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pods fetched."
          },
          "401": {
            "description": "Admin authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List pods",
        "tags": [
          "admin-pods"
        ]
      }
    },
    "/v1/admin/pods/{podId}": {
      "get": {
        "operationId": "AdminPodsController_getOne_v1",
        "parameters": [
          {
            "name": "podId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pod fetched."
          },
          "401": {
            "description": "Admin authentication required."
          },
          "404": {
            "description": "Pod not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pod details",
        "tags": [
          "admin-pods"
        ]
      }
    },
    "/v1/admin/achievements": {
      "get": {
        "operationId": "AdminAchievementsController_list_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Achievement definitions fetched."
          },
          "401": {
            "description": "Admin authentication required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List achievement definitions",
        "tags": [
          "admin-achievements"
        ]
      }
    }
  },
  "info": {
    "title": "Koajo API",
    "description": "API documentation for Koajo services",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "description": "Paste your Koajo access token here"
      }
    },
    "schemas": {
      "EarnedAchievementDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "pod_starter",
              "commitment_champ",
              "early_bird",
              "financially_fit",
              "pod_veteran",
              "koajo_og",
              "koajo_connector",
              "pod_leader",
              "team_player",
              "referral_master"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "awardedAt": {
            "type": "string",
            "description": "ISO datetime when the achievement was awarded."
          }
        },
        "required": [
          "code",
          "name",
          "description",
          "awardedAt"
        ]
      },
      "PendingAchievementDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "pod_starter",
              "commitment_champ",
              "early_bird",
              "financially_fit",
              "pod_veteran",
              "koajo_og",
              "koajo_connector",
              "pod_leader",
              "team_player",
              "referral_master"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "progress": {
            "type": "number",
            "description": "Progress towards the achievement (0-1)."
          },
          "remaining": {
            "type": "number",
            "description": "Number of actions remaining before unlocking."
          }
        },
        "required": [
          "code",
          "name",
          "description",
          "progress",
          "remaining"
        ]
      },
      "AchievementsSummaryDto": {
        "type": "object",
        "properties": {
          "totalEarned": {
            "type": "number",
            "description": "Total number of achievements earned."
          },
          "totalAvailable": {
            "type": "number",
            "description": "Total number of achievements available."
          },
          "earned": {
            "description": "List of achievements earned.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EarnedAchievementDto"
            }
          },
          "pending": {
            "description": "Pending achievements ordered by proximity.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingAchievementDto"
            }
          }
        },
        "required": [
          "totalEarned",
          "totalAvailable",
          "earned",
          "pending"
        ]
      },
      "SignupDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address for the new account.",
            "example": "user@example.com",
            "maxLength": 320
          },
          "phoneNumber": {
            "type": "string",
            "description": "Contact phone number in E.164 format.",
            "example": "+2348012345678"
          },
          "password": {
            "type": "string",
            "description": "Desired password meeting strong password requirements.",
            "example": "Str0ngP@ssword!",
            "minLength": 8
          },
          "avatarUrl": {
            "type": "object",
            "description": "Optional avatar image URL.",
            "example": "https://cdn.example.com/avatars/user.png",
            "nullable": true
          }
        },
        "required": [
          "email",
          "phoneNumber",
          "password"
        ]
      },
      "VerificationExpiryDto": {
        "type": "object",
        "properties": {
          "expiresAt": {
            "type": "string",
            "description": "ISO date string indicating when the verification expires.",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "expiresAt"
        ]
      },
      "SignupResultDto": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Unique identifier for the registered account.",
            "example": "9a4c1d15-3bfe-4f3f-8428-9c2ac5d43052"
          },
          "email": {
            "type": "string",
            "description": "Registered account email address.",
            "example": "user@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Registered phone number in E.164 format.",
            "example": "+2348012345678"
          },
          "avatarUrl": {
            "type": "object",
            "description": "Avatar image URL if provided during signup.",
            "example": "https://cdn.example.com/avatars/user.png",
            "nullable": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Indicates whether the email is verified after signup.",
            "example": false
          },
          "verification": {
            "description": "Verification information for completing signup.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationExpiryDto"
              }
            ]
          }
        },
        "required": [
          "accountId",
          "email",
          "phoneNumber",
          "emailVerified"
        ]
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Registered account email address.",
            "example": "user@example.com"
          },
          "token": {
            "type": "string",
            "description": "Verification token included in the email link.",
            "example": "d4c6e8f7ab2c4d1e3f4a5b6c7d8e9f00112233445566778899aabbccddeeff00"
          }
        },
        "required": [
          "email",
          "token"
        ]
      },
      "VerifyEmailResultDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Account email address.",
            "example": "user@example.com"
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates whether the email is now verified.",
            "example": true
          }
        },
        "required": [
          "email",
          "verified"
        ]
      },
      "CompleteStripeVerificationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Registered account email address.",
            "example": "user@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "First name returned from Stripe identity verification.",
            "example": "Jane",
            "maxLength": 60
          },
          "lastName": {
            "type": "string",
            "description": "Last name returned from Stripe identity verification.",
            "example": "Doe",
            "maxLength": 60
          },
          "stripeVerificationCompleted": {
            "type": "boolean",
            "description": "Indicates whether Stripe identity verification completed successfully.",
            "example": true
          },
          "verificationAttemptCount": {
            "type": "number",
            "description": "Count of Stripe verification attempts recorded.",
            "example": 2
          },
          "verificationFirstAttemptDate": {
            "type": "string",
            "description": "ISO timestamp of the first recorded Stripe verification attempt.",
            "example": "2024-05-01T09:30:00.000Z"
          },
          "verificationLastAttemptDate": {
            "type": "string",
            "description": "ISO timestamp of the most recent Stripe verification attempt.",
            "example": "2024-05-02T16:45:00.000Z"
          },
          "verificationStatus": {
            "type": "string",
            "description": "Current status string reported by Stripe (e.g. `pending`, `verified`).",
            "example": "pending",
            "maxLength": 64
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName",
          "stripeVerificationCompleted"
        ]
      },
      "VerificationWindowDto": {
        "type": "object",
        "properties": {
          "expiresAt": {
            "type": "string",
            "description": "ISO date string indicating when the verification expires.",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "sentAt": {
            "type": "string",
            "description": "ISO date string indicating when the verification was sent.",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "expiresAt",
          "sentAt"
        ]
      },
      "CompleteStripeVerificationResultDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Account email address.",
            "example": "user@example.com"
          },
          "stripeVerificationCompleted": {
            "type": "boolean",
            "description": "Indicates whether Stripe verification has been completed.",
            "example": true
          },
          "verificationAttemptCount": {
            "type": "object",
            "description": "Total number of recorded Stripe verification attempts.",
            "example": 2,
            "nullable": true
          },
          "verificationFirstAttemptDate": {
            "type": "object",
            "description": "ISO timestamp of the first Stripe verification attempt, if known.",
            "example": "2024-05-01T09:30:00.000Z",
            "nullable": true
          },
          "verificationLastAttemptDate": {
            "type": "object",
            "description": "ISO timestamp of the latest Stripe verification attempt, if known.",
            "example": "2024-05-02T16:45:00.000Z",
            "nullable": true
          },
          "verificationStatus": {
            "type": "object",
            "description": "Latest verification status reported by Stripe (e.g. `pending`).",
            "example": "pending",
            "nullable": true
          },
          "verification": {
            "description": "Details about the verification email sent after Stripe completion, if any.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationWindowDto"
              }
            ]
          }
        },
        "required": [
          "email",
          "stripeVerificationCompleted",
          "verificationAttemptCount",
          "verificationFirstAttemptDate",
          "verificationLastAttemptDate",
          "verificationStatus"
        ]
      },
      "ResendVerificationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Registered account email address.",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResendVerificationResultDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Account email address.",
            "example": "user@example.com"
          },
          "verification": {
            "description": "Details about the freshly issued verification email.",
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationWindowDto"
              }
            ]
          }
        },
        "required": [
          "email",
          "verification"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email associated with the account.",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ForgotPasswordResultDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Account email address.",
            "example": "user@example.com"
          },
          "requested": {
            "type": "boolean",
            "description": "Indicates that the reset request was registered.",
            "example": true
          }
        },
        "required": [
          "email",
          "requested"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email associated with the account.",
            "example": "user@example.com"
          },
          "token": {
            "type": "string",
            "description": "Password reset token supplied in the email link.",
            "example": "d4c6e8f7ab2c4d1e3f4a5b6c7d8e9f00112233445566778899aabbccddeeff00"
          },
          "newPassword": {
            "type": "string",
            "description": "New password that meets strong password requirements.",
            "example": "N3wStr0ngP@ssword!",
            "minLength": 8
          }
        },
        "required": [
          "email",
          "token",
          "newPassword"
        ]
      },
      "ResetPasswordResultDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Account email address.",
            "example": "user@example.com"
          },
          "reset": {
            "type": "boolean",
            "description": "Indicates that the password was successfully reset.",
            "example": true
          }
        },
        "required": [
          "email",
          "reset"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password for the authenticated account.",
            "example": "Curr3ntP@ss!",
            "minLength": 8
          },
          "newPassword": {
            "type": "string",
            "description": "Desired new password meeting strong password requirements.",
            "example": "N3wStr0ngP@ssword!",
            "minLength": 8
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "ChangePasswordResultDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates that the password update was successful.",
            "example": true
          }
        },
        "required": [
          "success"
        ]
      },
      "UpdateAvatarDto": {
        "type": "object",
        "properties": {
          "avatarUrl": {
            "type": "object",
            "description": "Avatar image URL. Send null to clear the avatar.",
            "example": "https://cdn.example.com/avatars/user.png",
            "nullable": true
          }
        }
      },
      "UpdateAvatarResultDto": {
        "type": "object",
        "properties": {
          "avatarUrl": {
            "type": "object",
            "description": "Updated avatar URL. Null means the avatar has been cleared.",
            "example": "https://cdn.example.com/avatars/user.png",
            "nullable": true
          }
        },
        "required": [
          "avatarUrl"
        ]
      },
      "UpdateNotificationPreferencesDto": {
        "type": "object",
        "properties": {
          "emailNotificationsEnabled": {
            "type": "boolean",
            "description": "Enable or disable general system emails.",
            "example": true
          },
          "transactionNotificationsEnabled": {
            "type": "boolean",
            "description": "Enable or disable transaction-related emails.",
            "example": true
          }
        }
      },
      "UpdateNotificationPreferencesResultDto": {
        "type": "object",
        "properties": {
          "emailNotificationsEnabled": {
            "type": "boolean",
            "description": "Indicates if general system emails are enabled.",
            "example": true
          },
          "transactionNotificationsEnabled": {
            "type": "boolean",
            "description": "Indicates if transaction-related emails are enabled.",
            "example": true
          }
        },
        "required": [
          "emailNotificationsEnabled",
          "transactionNotificationsEnabled"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Account email address.",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "Account password used for authentication.",
            "example": "Str0ngP@ssword!",
            "minLength": 8
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "PodPlanDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "100-12"
          },
          "amount": {
            "type": "number",
            "example": 100
          },
          "lifecycleWeeks": {
            "type": "number",
            "example": 12
          },
          "maxMembers": {
            "type": "number",
            "example": 6
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the plan is active.",
            "example": true
          }
        },
        "required": [
          "code",
          "amount",
          "lifecycleWeeks",
          "maxMembers",
          "active"
        ]
      },
      "PodMemberSlotDto": {
        "type": "object",
        "properties": {
          "publicId": {
            "type": "string",
            "description": "Opaque identifier for the member within the pod."
          },
          "order": {
            "type": "number",
            "description": "Position in the payout order.",
            "example": 1
          },
          "payoutDate": {
            "type": "object",
            "description": "ISO datetime indicating when the payout is scheduled.",
            "example": "2025-01-15T00:00:00.000Z",
            "nullable": true
          },
          "isYou": {
            "type": "boolean",
            "description": "True if this slot corresponds to the requesting account."
          }
        },
        "required": [
          "publicId",
          "order",
          "payoutDate",
          "isYou"
        ]
      },
      "PodMembershipDto": {
        "type": "object",
        "properties": {
          "podId": {
            "type": "string",
            "description": "Unique identifier for the pod."
          },
          "planCode": {
            "type": "string",
            "description": "Pod plan code.",
            "example": "100-12"
          },
          "amount": {
            "type": "number",
            "description": "Contribution amount per cycle.",
            "example": 100
          },
          "lifecycleWeeks": {
            "type": "number",
            "description": "Total lifecycle length in weeks.",
            "example": 12
          },
          "maxMembers": {
            "type": "number",
            "description": "Maximum members in the pod.",
            "example": 6
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "open",
              "grace",
              "active",
              "completed"
            ]
          },
          "podType": {
            "type": "string",
            "enum": [
              "system",
              "custom"
            ],
            "description": "Type of pod (system or custom)."
          },
          "cadence": {
            "type": "string",
            "enum": [
              "bi-weekly",
              "monthly"
            ],
            "nullable": true,
            "description": "Cadence for custom pods."
          },
          "randomizePositions": {
            "type": "object",
            "description": "Indicates if custom pod payout order is randomized.",
            "nullable": true
          },
          "expectedMemberCount": {
            "type": "object",
            "description": "Expected number of members when the pod is full (custom pods).",
            "nullable": true
          },
          "scheduledStartDate": {
            "type": "object",
            "description": "ISO datetime when the pod is scheduled to start.",
            "nullable": true
          },
          "startDate": {
            "type": "object",
            "description": "ISO datetime when contributions begin.",
            "nullable": true
          },
          "graceEndsAt": {
            "type": "object",
            "description": "ISO datetime when the grace period ends.",
            "nullable": true
          },
          "lockedAt": {
            "type": "object",
            "description": "ISO datetime when the pod locked.",
            "nullable": true
          },
          "payoutOrder": {
            "type": "object",
            "description": "Order in the payout schedule for the requesting account.",
            "nullable": true
          },
          "payoutDate": {
            "type": "object",
            "description": "Scheduled payout date for the requesting account.",
            "nullable": true
          },
          "aheadOfYou": {
            "description": "Members ahead of the requester in payout order.",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodMemberSlotDto"
            }
          },
          "behindYou": {
            "description": "Members behind the requester in payout order.",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodMemberSlotDto"
            }
          },
          "orderedMembers": {
            "description": "All members ordered by payout slots (visible once the pod locks).",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodMemberSlotDto"
            }
          },
          "goalType": {
            "type": "string",
            "enum": [
              "mortgage",
              "college_tuition",
              "debt_payoff",
              "emergency_fund",
              "business_capital",
              "savings",
              "other"
            ],
            "nullable": true
          },
          "goalNote": {
            "type": "object",
            "description": "Custom goal details when goalType is other.",
            "nullable": true
          },
          "totalContributed": {
            "type": "object",
            "description": "Total amount contributed by the member so far.",
            "example": "0.00",
            "nullable": true
          },
          "totalContributionTarget": {
            "type": "string",
            "description": "Total amount the member is expected to contribute through the pod lifecycle.",
            "example": "1200.00"
          },
          "contributionProgress": {
            "type": "number",
            "description": "Percentage of the total contribution that has been fulfilled.",
            "example": 25
          },
          "nextPayoutDate": {
            "type": "object",
            "description": "The next payout date for this pod.",
            "nullable": true,
            "example": "2025-02-15T00:00:00.000Z"
          },
          "nextContributionDate": {
            "type": "object",
            "description": "The upcoming contribution window start date.",
            "nullable": true
          }
        },
        "required": [
          "podId",
          "planCode",
          "amount",
          "lifecycleWeeks",
          "maxMembers",
          "status",
          "podType",
          "cadence",
          "randomizePositions",
          "expectedMemberCount",
          "scheduledStartDate",
          "startDate",
          "graceEndsAt",
          "lockedAt",
          "payoutOrder",
          "payoutDate",
          "aheadOfYou",
          "behindYou",
          "orderedMembers",
          "goalNote",
          "totalContributed",
          "totalContributionTarget",
          "contributionProgress",
          "nextPayoutDate",
          "nextContributionDate"
        ]
      },
      "CreateCustomPodDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Contribution amount each member must pay per cycle.",
            "example": 500,
            "minimum": 1
          },
          "cadence": {
            "type": "string",
            "description": "Cadence of the custom pod.",
            "enum": [
              "bi-weekly",
              "monthly"
            ],
            "example": "bi-weekly"
          },
          "randomizePositions": {
            "type": "boolean",
            "description": "Whether to randomize payout positions once the pod is full.",
            "example": true
          },
          "invitees": {
            "description": "List of invited participant emails (excluding the creator). Must contain between 5 and 19 entries to honour the 6-20 member constraint.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "amount",
          "cadence",
          "randomizePositions",
          "invitees"
        ]
      },
      "AcceptCustomPodInviteDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Invitation token supplied via email.",
            "example": "b2d1c5e4f7a8..."
          }
        },
        "required": [
          "token"
        ]
      },
      "JoinPodDto": {
        "type": "object",
        "properties": {
          "goal": {
            "type": "string",
            "enum": [
              "mortgage",
              "college_tuition",
              "debt_payoff",
              "emergency_fund",
              "business_capital",
              "savings",
              "other"
            ]
          },
          "goalNote": {
            "type": "string",
            "description": "Custom financial goal description when goal is other.",
            "maxLength": 255
          }
        },
        "required": [
          "goal"
        ]
      },
      "AdminLoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Admin email address.",
            "example": "superadmin@koajo.local"
          },
          "password": {
            "type": "string",
            "description": "Admin password.",
            "example": "ChangeMe123!"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AdminLoginResultDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token for admin APIs."
          },
          "tokenType": {
            "type": "string",
            "description": "Token type.",
            "example": "Bearer"
          },
          "expiresAt": {
            "type": "string",
            "description": "ISO timestamp when the token expires."
          },
          "role": {
            "type": "string",
            "enum": [
              "super_admin",
              "admin"
            ],
            "description": "Role associated with the admin."
          },
          "isSuperAdmin": {
            "type": "boolean",
            "description": "Indicates whether the logged-in admin is the super admin.",
            "example": true
          }
        },
        "required": [
          "accessToken",
          "tokenType",
          "expiresAt",
          "role",
          "isSuperAdmin"
        ]
      },
      "AdminUserDtoClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Admin user identifier."
          },
          "email": {
            "type": "string",
            "description": "Admin email address."
          },
          "role": {
            "type": "string",
            "enum": [
              "super_admin",
              "admin"
            ],
            "description": "Role assigned to the admin."
          },
          "createdAt": {
            "type": "string",
            "description": "ISO timestamp when the admin was created."
          },
          "lastLoginAt": {
            "type": "object",
            "description": "ISO timestamp of the last login, if any.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "email",
          "role",
          "createdAt",
          "lastLoginAt"
        ]
      },
      "CreateAdminUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email for the new admin user."
          },
          "password": {
            "type": "string",
            "description": "Password for the admin user.",
            "minLength": 8
          },
          "role": {
            "type": "string",
            "enum": [
              "super_admin",
              "admin"
            ],
            "description": "Role for the admin user."
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CreateAdminUserResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Admin user identifier."
          },
          "email": {
            "type": "string",
            "description": "Admin email address."
          },
          "role": {
            "type": "string",
            "enum": [
              "super_admin",
              "admin"
            ],
            "description": "Role assigned to the admin."
          },
          "createdAt": {
            "type": "string",
            "description": "ISO timestamp when the admin was created."
          },
          "lastLoginAt": {
            "type": "object",
            "description": "ISO timestamp of the last login, if any.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "email",
          "role",
          "createdAt",
          "lastLoginAt"
        ]
      }
    }
  }
}